"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsMetricFactory = void 0;
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const EcsNamespace = 'AWS/ECS';
const ApplicationELBNamespace = 'AWS/ApplicationELB';
class EcsMetricFactory {
    metricCpuUtilizationAverage(clusterName, serviceName) {
        return this
            .ecsMetric("CPUUtilization" /* CPUUtilization */, clusterName, serviceName)
            .with({ statistic: aws_cloudwatch_1.Statistic.AVERAGE });
    }
    metricMemoryUtilizationAverage(clusterName, serviceName) {
        return this
            .ecsMetric("MemoryUtilization" /* MemoryUtilization */, clusterName, serviceName)
            .with({ statistic: aws_cloudwatch_1.Statistic.AVERAGE });
    }
    ecsMetric(metric, clusterName, serviceName) {
        return new aws_cloudwatch_1.Metric({
            namespace: EcsNamespace,
            metricName: metric,
            dimensionsMap: {
                ClusterName: clusterName,
                ServiceName: serviceName,
            },
        });
    }
    metricMinHealthyHostCount(targetGroup, loadBalancer) {
        return this
            .albMetric("HealthyHostCount" /* HealthyHostCount */, targetGroup, loadBalancer)
            .with({ statistic: aws_cloudwatch_1.Statistic.MINIMUM });
    }
    metricMaxUnhealthyHostCount(targetGroup, loadBalancer) {
        return this
            .albMetric("UnHealthyHostCount" /* UnHealthyHostCount */, targetGroup, loadBalancer)
            .with({ statistic: aws_cloudwatch_1.Statistic.MAXIMUM });
    }
    metricTargetResponseTime(targetGroup, loadBalancer) {
        const baseMetric = this.albMetric("TargetResponseTime" /* TargetResponseTime */, targetGroup, loadBalancer);
        return {
            min: baseMetric.with({ statistic: aws_cloudwatch_1.Statistic.MINIMUM }),
            max: baseMetric.with({ statistic: aws_cloudwatch_1.Statistic.MAXIMUM }),
            avg: baseMetric.with({ statistic: aws_cloudwatch_1.Statistic.AVERAGE }),
        };
    }
    metricRequestCount(targetGroup, loadBalancer) {
        return this
            .albMetric("RequestCount" /* RequestCount */, targetGroup, loadBalancer)
            .with({ statistic: aws_cloudwatch_1.Statistic.SUM });
    }
    metricHttpErrorStatusCodeRate(targetGroup, loadBalancer) {
        const requests = this.metricRequestCount(targetGroup, loadBalancer);
        const errors = this.metricHttpStatusCodeCount(targetGroup, loadBalancer);
        return new aws_cloudwatch_1.MathExpression({
            expression: 'http4xx + http5xx / requests',
            usingMetrics: {
                http4xx: errors.count4XX,
                http5xx: errors.count5XX,
                requests,
            },
        });
    }
    metricHttpStatusCodeCount(targetGroup, loadBalancer) {
        return {
            count2XX: this.albMetric("HTTPCode_Target_2XX_Count" /* TARGET_2XX_COUNT */, targetGroup, loadBalancer).with({ statistic: aws_cloudwatch_1.Statistic.SUM }),
            count3XX: this.albMetric("HTTPCode_Target_3XX_Count" /* TARGET_3XX_COUNT */, targetGroup, loadBalancer).with({ statistic: aws_cloudwatch_1.Statistic.SUM }),
            count4XX: this.albMetric("HTTPCode_Target_4XX_Count" /* TARGET_4XX_COUNT */, targetGroup, loadBalancer).with({ statistic: aws_cloudwatch_1.Statistic.SUM }),
            count5XX: this.albMetric("HTTPCode_Target_5XX_Count" /* TARGET_5XX_COUNT */, targetGroup, loadBalancer).with({ statistic: aws_cloudwatch_1.Statistic.SUM }),
        };
    }
    albMetric(metric, targetGroup, loadBalancer) {
        return new aws_cloudwatch_1.Metric({
            namespace: ApplicationELBNamespace,
            metricName: metric,
            dimensionsMap: {
                TargetGroup: targetGroup,
                LoadBalancer: loadBalancer,
            },
        });
    }
}
exports.EcsMetricFactory = EcsMetricFactory;
//# sourceMappingURL=data:application/json;base64,
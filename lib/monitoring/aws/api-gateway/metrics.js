"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayMetricFactory = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const Namespace = 'AWS/ApiGateway';
const StatisticP90 = 'p90';
const StatisticP95 = 'p95';
const StatisticP99 = 'p99';
class ApiGatewayMetricFactory {
    metricErrors(apiName, stage, op) {
        return {
            count4XX: this.metric("4XXError" /* FourHundredError */, apiName, stage, op).with({ label: '4XX Errors', statistic: aws_cloudwatch_1.Statistic.SUM, color: '#ff7f0e' }),
            count5XX: this.metric("5XXError" /* FiveHundredError */, apiName, stage, op).with({ label: '5XX Errors', statistic: aws_cloudwatch_1.Statistic.SUM, color: '#d62728' }),
        };
    }
    metricCache(apiName, stage, op) {
        return {
            hits: this.metric("CacheHitCount" /* CacheHitCount */, apiName, stage, op).with({ label: 'Cache Hit', statistic: aws_cloudwatch_1.Statistic.SUM, color: '#2ca02c' }),
            misses: this.metric("CacheMissCount" /* CacheMissCount */, apiName, stage, op).with({ label: 'Cache Miss', statistic: aws_cloudwatch_1.Statistic.SUM, color: '#d62728' }),
        };
    }
    metricCalls(apiName, stage, op) {
        return this.metric("Count" /* Count */, apiName, stage, op).with({ label: 'Calls', color: '#1f77b4', statistic: aws_cloudwatch_1.Statistic.SUM });
    }
    metricIntegrationLatency(apiName, stage, op) {
        const baseMetric = this.metric("IntegrationLatency" /* IntegrationLatency */, apiName, stage, op);
        return {
            min: baseMetric.with({ label: 'min', statistic: aws_cloudwatch_1.Statistic.MINIMUM }),
            avg: baseMetric.with({ label: 'avg', statistic: aws_cloudwatch_1.Statistic.AVERAGE }),
            p90: baseMetric.with({ label: 'p90', statistic: StatisticP90 }),
            p95: baseMetric.with({ label: 'p95', statistic: StatisticP95 }),
            p99: baseMetric.with({ label: 'p99', statistic: StatisticP99 }),
            max: baseMetric.with({ label: 'max', statistic: aws_cloudwatch_1.Statistic.MAXIMUM }),
        };
    }
    metricLatency(apiName, stage, op) {
        const baseMetric = this.metric("Latency" /* Latency */, apiName, stage, op);
        return {
            min: baseMetric.with({ label: 'min', statistic: aws_cloudwatch_1.Statistic.MINIMUM }),
            avg: baseMetric.with({ label: 'avg', statistic: aws_cloudwatch_1.Statistic.AVERAGE }),
            p90: baseMetric.with({ label: 'p90', statistic: StatisticP90 }),
            p95: baseMetric.with({ label: 'p95', statistic: StatisticP95 }),
            p99: baseMetric.with({ label: 'p99', statistic: StatisticP99 }),
            max: baseMetric.with({ label: 'max', statistic: aws_cloudwatch_1.Statistic.MAXIMUM }),
        };
    }
    metric(metricName, apiName, stage, op) {
        return new aws_cloudwatch_1.Metric({
            metricName,
            namespace: Namespace,
            period: aws_cdk_lib_1.Duration.minutes(1),
            dimensionsMap: {
                ApiName: apiName,
                Stage: stage,
                ...op && {
                    Method: op.httpMethod,
                    Resource: op.resourcePath,
                },
            },
        });
    }
}
exports.ApiGatewayMetricFactory = ApiGatewayMetricFactory;
//# sourceMappingURL=data:application/json;base64,
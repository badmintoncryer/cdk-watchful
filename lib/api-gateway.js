"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchApiGateway = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const metrics_1 = require("./monitoring/aws/api-gateway/metrics");
class WatchApiGateway extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.api = props.restApi.node.findChild('Resource');
        this.apiName = this.api.name;
        this.stage = props.restApi.deploymentStage.stageName;
        this.watchful = props.watchful;
        this.metrics = new metrics_1.ApiGatewayMetricFactory();
        const alarmThreshold = props.serverErrorThreshold == null ? 1 : props.serverErrorThreshold;
        if (alarmThreshold) {
            const count5xxMetric = this.metrics.metricErrors(this.apiName, this.stage).count5XX.with({
                statistic: 'sum',
                period: aws_cdk_lib_1.Duration.minutes(5),
            });
            this.watchful.addAlarm(count5xxMetric.createAlarm(this, '5XXErrorAlarm', {
                alarmDescription: `at ${alarmThreshold}`,
                threshold: alarmThreshold,
                comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
                evaluationPeriods: 1,
            }));
        }
        this.watchful.addSection(props.title, {
            links: [{ title: 'Amazon API Gateway Console', url: linkForApiGateway(props.restApi) }],
        });
        [undefined, ...props.watchedOperations || []].forEach(operation => this.watchful.addWidgets(this.createCallGraphWidget(operation, alarmThreshold), ...props.cacheGraph ? [this.createCacheGraphWidget(operation)] : [], this.createLatencyGraphWidget(operation), this.createIntegrationLatencyGraphWidget(operation)));
    }
    createCallGraphWidget(opts, alarmThreshold) {
        const leftAnnotations = alarmThreshold
            ? [{ value: alarmThreshold, color: '#ff0000', label: '5XX Errors Alarm' }]
            : [];
        return new aws_cloudwatch_1.GraphWidget({
            title: `${opts ? `${opts.httpMethod} ${opts.resourcePath}` : 'Overall'} Calls/min`,
            width: 12,
            stacked: false,
            left: [
                this.metrics.metricCalls(this.apiName, this.stage, opts),
                this.metrics.metricErrors(this.apiName, this.stage, opts).count4XX,
                this.metrics.metricErrors(this.apiName, this.stage, opts).count5XX,
            ],
            leftAnnotations,
        });
    }
    createCacheGraphWidget(opts) {
        return new aws_cloudwatch_1.GraphWidget({
            title: `${opts ? `${opts.httpMethod} ${opts.resourcePath}` : 'Overall'} Cache/min`,
            width: 12,
            stacked: false,
            left: [
                this.metrics.metricCalls(this.apiName, this.stage, opts),
                this.metrics.metricCache(this.apiName, this.stage, opts).hits,
                this.metrics.metricCache(this.apiName, this.stage, opts).misses,
            ],
        });
    }
    createLatencyGraphWidget(opts) {
        return new aws_cloudwatch_1.GraphWidget({
            title: `${opts ? `${opts.httpMethod} ${opts.resourcePath}` : 'Overall'} (1-minute periods)`,
            width: 12,
            stacked: false,
            left: Object.values(this.metrics.metricLatency(this.apiName, this.stage, opts)),
        });
    }
    createIntegrationLatencyGraphWidget(opts) {
        return new aws_cloudwatch_1.GraphWidget({
            title: `${opts ? `${opts.httpMethod} ${opts.resourcePath}` : 'Overall'} Integration (1-minute periods)`,
            width: 12,
            stacked: false,
            left: Object.values(this.metrics.metricIntegrationLatency(this.apiName, this.stage, opts)),
        });
    }
}
exports.WatchApiGateway = WatchApiGateway;
_a = JSII_RTTI_SYMBOL_1;
WatchApiGateway[_a] = { fqn: "cdk-watchful.WatchApiGateway", version: "0.0.0" };
function linkForApiGateway(api) {
    return `https://console.aws.amazon.com/apigateway/home?region=${api.stack.region}#/apis/${api.restApiId}`;
}
//# sourceMappingURL=data:application/json;base64,
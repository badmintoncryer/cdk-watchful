"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchDynamoTable = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const constructs_1 = require("constructs");
const metrics_1 = require("./monitoring/aws/dynamodb/metrics");
const DEFAULT_PERCENT = 80;
class WatchDynamoTable extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const table = props.table;
        this.watchful = props.watchful;
        this.metrics = new metrics_1.DynamoDbMetricFactory();
        const cfnTable = table.node.defaultChild;
        const billingMode = cfnTable.billingMode ?? dynamodb.BillingMode.PROVISIONED;
        switch (billingMode) {
            case dynamodb.BillingMode.PAY_PER_REQUEST:
                this.createWidgetsForPayPerRequestTable(props.title, table);
                break;
            case dynamodb.BillingMode.PROVISIONED:
                this.createWidgetsForProvisionedTable(props.title, table, props.readCapacityThresholdPercent, props.writeCapacityThresholdPercent);
                break;
        }
    }
    /**
     * Create widgets for tables with billingMode=PROVISIONED
     * Include alarms when capacity is over 80% of the provisioned value
     */
    createWidgetsForProvisionedTable(title, table, readCapacityThresholdPercent, writeCapacityThresholdPercent) {
        const cfnTable = table.node.defaultChild;
        const metrics = this.metrics.metricConsumedCapacityUnits(table.tableName);
        const readCapacityMetric = metrics.read;
        const writeCapacityMetric = metrics.write;
        const throughput = cfnTable.provisionedThroughput;
        this.watchful.addAlarm(this.createDynamoCapacityAlarm('read', readCapacityMetric, throughput.readCapacityUnits, readCapacityThresholdPercent));
        this.watchful.addAlarm(this.createDynamoCapacityAlarm('write', writeCapacityMetric, throughput.writeCapacityUnits, writeCapacityThresholdPercent));
        this.watchful.addSection(title, {
            links: [{ title: 'Amazon DynamoDB Console', url: linkForDynamoTable(table) }],
        });
        this.watchful.addWidgets(this.createDynamoCapacityGraph('Read', readCapacityMetric, throughput.readCapacityUnits, readCapacityThresholdPercent), this.createDynamoCapacityGraph('Write', writeCapacityMetric, throughput.writeCapacityUnits, writeCapacityThresholdPercent));
    }
    /**
     * Create widgets for tables with billingMode=PAY_PER_REQUEST
     * Include consumed capacity metrics
     */
    createWidgetsForPayPerRequestTable(title, table) {
        const metrics = this.metrics.metricConsumedCapacityUnits(table.tableName);
        const readCapacityMetric = metrics.read;
        const writeCapacityMetric = metrics.write;
        this.watchful.addSection(title, {
            links: [{ title: 'Amazon DynamoDB Console', url: linkForDynamoTable(table) }],
        });
        this.watchful.addWidgets(this.createDynamoPPRGraph('Read', readCapacityMetric), this.createDynamoPPRGraph('Write', writeCapacityMetric));
    }
    createDynamoCapacityGraph(type, metric, provisioned, percent = DEFAULT_PERCENT) {
        return new cloudwatch.GraphWidget({
            title: `${type} Capacity Units/${metric.period.toMinutes()}min`,
            width: 12,
            stacked: true,
            left: [metric],
            leftAnnotations: [
                {
                    label: 'Provisioned',
                    value: provisioned * metric.period.toSeconds(),
                    color: '#58D68D',
                },
                {
                    color: '#FF3333',
                    label: `Alarm on ${percent}%`,
                    value: calculateUnits(provisioned, percent, metric.period),
                },
            ],
        });
    }
    createDynamoPPRGraph(type, metric) {
        return new cloudwatch.GraphWidget({
            title: `${type} Capacity Units/${metric.period.toMinutes()}min`,
            width: 12,
            stacked: true,
            left: [metric],
        });
    }
    createDynamoCapacityAlarm(type, metric, provisioned, percent = DEFAULT_PERCENT) {
        const periodMinutes = 5;
        const threshold = calculateUnits(provisioned, percent, aws_cdk_lib_1.Duration.minutes(periodMinutes));
        const metricWithPeriod = metric.with({
            statistic: 'sum',
            period: aws_cdk_lib_1.Duration.minutes(periodMinutes),
        });
        const alarm = metricWithPeriod.createAlarm(this, `CapacityAlarm:${type}`, {
            alarmDescription: `at ${threshold}% of ${type} capacity`,
            threshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
            evaluationPeriods: 1,
        });
        return alarm;
    }
}
exports.WatchDynamoTable = WatchDynamoTable;
_a = JSII_RTTI_SYMBOL_1;
WatchDynamoTable[_a] = { fqn: "cdk-watchful.WatchDynamoTable", version: "0.0.0" };
function linkForDynamoTable(table, tab = 'overview') {
    return `https://console.aws.amazon.com/dynamodb/home?region=${table.stack.region}#tables:selected=${table.tableName};tab=${tab}`;
}
function calculateUnits(provisioned, percent, period) {
    return provisioned * ((percent === undefined ? DEFAULT_PERCENT : percent) / 100) * period.toSeconds();
}
//# sourceMappingURL=data:application/json;base64,
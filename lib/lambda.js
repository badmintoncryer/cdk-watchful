"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchLambdaFunction = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const metrics_1 = require("./monitoring/aws/lambda/metrics");
const DEFAULT_DURATION_THRESHOLD_PERCENT = 80;
class WatchLambdaFunction extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const cfnFunction = props.fn.node.defaultChild;
        const timeoutSec = cfnFunction.timeout || 3;
        this.watchful = props.watchful;
        this.fn = props.fn;
        this.metrics = new metrics_1.LambdaMetricFactory();
        this.watchful.addSection(props.title, {
            links: [
                { title: 'AWS Lambda Console', url: linkForLambdaFunction(this.fn) },
                { title: 'CloudWatch Logs', url: linkForLambdaLogs(this.fn) },
            ],
        });
        const { errorsMetric, errorsAlarm } = this.createErrorsMonitor(props.errorsPerMinuteThreshold, props.evaluationPeriods);
        const { throttlesMetric, throttlesAlarm } = this.createThrottlesMonitor(props.throttlesPerMinuteThreshold, props.evaluationPeriods);
        const { durationMetric, durationAlarm } = this.createDurationMonitor(timeoutSec, props.durationThresholdPercent, props.evaluationPeriods);
        const invocationsMetric = this.metrics.metricInvocations(this.fn.functionName);
        this.watchful.addWidgets(new cloudwatch.GraphWidget({
            title: `Invocations/${invocationsMetric.period.toMinutes()}min`,
            width: 6,
            left: [invocationsMetric],
        }), new cloudwatch.GraphWidget({
            title: `Errors/${errorsMetric.period.toMinutes()}min`,
            width: 6,
            left: [errorsMetric],
            leftAnnotations: [errorsAlarm.toAnnotation()],
        }), new cloudwatch.GraphWidget({
            title: `Throttles/${throttlesMetric.period.toMinutes()}min`,
            width: 6,
            left: [throttlesMetric],
            leftAnnotations: [throttlesAlarm.toAnnotation()],
        }), new cloudwatch.GraphWidget({
            title: `Duration/${durationMetric.period.toMinutes()}min`,
            width: 6,
            left: [durationMetric],
            leftAnnotations: [durationAlarm.toAnnotation()],
        }));
    }
    createErrorsMonitor(errorsPerMinuteThreshold = 0, evaluationPeriods = 3) {
        const fn = this.fn;
        const errorsMetric = this.metrics.metricErrors(fn.functionName);
        const errorsAlarm = errorsMetric.createAlarm(this, 'ErrorsAlarm', {
            alarmDescription: `Over ${errorsPerMinuteThreshold} errors per minute`,
            threshold: errorsPerMinuteThreshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods,
        });
        this.watchful.addAlarm(errorsAlarm);
        return { errorsMetric, errorsAlarm };
    }
    createThrottlesMonitor(throttlesPerMinuteThreshold = 0, evaluationPeriods = 3) {
        const fn = this.fn;
        const throttlesMetric = this.metrics.metricThrottles(fn.functionName);
        const throttlesAlarm = throttlesMetric.createAlarm(this, 'ThrottlesAlarm', {
            alarmDescription: `Over ${throttlesPerMinuteThreshold} throttles per minute`,
            threshold: throttlesPerMinuteThreshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods,
        });
        this.watchful.addAlarm(throttlesAlarm);
        return { throttlesMetric, throttlesAlarm };
    }
    createDurationMonitor(timeoutSec, durationPercentThreshold = DEFAULT_DURATION_THRESHOLD_PERCENT, evaluationPeriods = 3) {
        const fn = this.fn;
        const durationMetric = this.metrics.metricDuration(fn.functionName).p99;
        const durationThresholdSec = Math.floor((durationPercentThreshold / 100) * timeoutSec);
        const durationAlarm = durationMetric.createAlarm(this, 'DurationAlarm', {
            alarmDescription: `p99 latency >= ${durationThresholdSec}s (${durationPercentThreshold}%)`,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            threshold: durationThresholdSec * 1000,
            evaluationPeriods,
        });
        this.watchful.addAlarm(durationAlarm);
        return { durationMetric, durationAlarm };
    }
}
exports.WatchLambdaFunction = WatchLambdaFunction;
_a = JSII_RTTI_SYMBOL_1;
WatchLambdaFunction[_a] = { fqn: "cdk-watchful.WatchLambdaFunction", version: "0.0.0" };
function linkForLambdaFunction(fn, tab = 'graph') {
    return `https://console.aws.amazon.com/lambda/home?region=${fn.stack.region}#/functions/${fn.functionName}?tab=${tab}`;
}
function linkForLambdaLogs(fn) {
    return `https://console.aws.amazon.com/cloudwatch/home?region=${fn.stack.region}#logEventViewer:group=/aws/lambda/${fn.functionName}`;
}
//# sourceMappingURL=data:application/json;base64,
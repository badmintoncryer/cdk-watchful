"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watchful = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const cloudwatch_actions = require("aws-cdk-lib/aws-cloudwatch-actions");
const sns = require("aws-cdk-lib/aws-sns");
const sns_subscriptions = require("aws-cdk-lib/aws-sns-subscriptions");
const constructs_1 = require("constructs");
const api_gateway_1 = require("./api-gateway");
const aspect_1 = require("./aspect");
const dynamodb_1 = require("./dynamodb");
const ecs_1 = require("./ecs");
const lambda_1 = require("./lambda");
const rds_aurora_1 = require("./rds-aurora");
const state_machine_1 = require("./state-machine");
const section_1 = require("./widget/section");
class Watchful extends constructs_1.Construct {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.createdAlarmCount = 0;
        this.alarmActions = [
            ...(props.alarmActionArns ?? []).map((alarmActionArn) => ({ bind: () => ({ alarmActionArn }) })),
            ...(props.alarmActions ?? []),
        ];
        if ((props.alarmEmail || props.alarmSqs) && !props.alarmSns) {
            this.alarmTopic = new sns.Topic(this, 'AlarmTopic', { displayName: 'Watchful Alarms' });
        }
        if (props.alarmSns) {
            this.alarmTopic = props.alarmSns;
        }
        if (props.alarmEmail && this.alarmTopic) {
            this.alarmTopic.addSubscription(new sns_subscriptions.EmailSubscription(props.alarmEmail));
        }
        if (props.alarmSqs && this.alarmTopic) {
            this.alarmTopic.addSubscription(new sns_subscriptions.SqsSubscription(
            // sqs.Queue.fromQueueArn(this, 'AlarmQueue', props.alarmSqs)
            props.alarmSqs));
        }
        if (props.dashboard === false && props.dashboardName) {
            throw new Error('Dashboard name is provided but dashboard creation is disabled');
        }
        if (props.dashboard !== false) {
            this.dash = new cloudwatch.Dashboard(this, 'Dashboard', { dashboardName: props.dashboardName });
            new aws_cdk_lib_1.CfnOutput(this, 'WatchfulDashboard', {
                value: linkForDashboard(this.dash),
            });
        }
    }
    addWidgets(...widgets) {
        this.dash?.addWidgets(...widgets);
    }
    addAlarm(alarm) {
        const alarmWithAction = hasAlarmAction(alarm) ? alarm : new cloudwatch.CompositeAlarm(this, `Created Alarm ${this.createdAlarmCount++}`, {
            alarmRule: cloudwatch.AlarmRule.fromAlarm(alarm, cloudwatch.AlarmState.ALARM),
        });
        if (this.alarmTopic) {
            alarmWithAction.addAlarmAction(new cloudwatch_actions.SnsAction(this.alarmTopic));
        }
        alarmWithAction.addAlarmAction(...this.alarmActions);
    }
    addSection(title, options = {}) {
        this.addWidgets(new section_1.SectionWidget({
            titleLevel: 1,
            titleMarkdown: title,
            quicklinks: options.links,
        }));
    }
    watchScope(scope, options) {
        const aspect = new aspect_1.WatchfulAspect(this, options);
        aws_cdk_lib_1.Aspects.of(scope).add(aspect);
    }
    watchDynamoTable(title, table, options = {}) {
        return new dynamodb_1.WatchDynamoTable(this, aws_cdk_lib_1.Names.uniqueId(table), {
            title,
            watchful: this,
            table,
            ...options,
        });
    }
    watchApiGateway(title, restApi, options = {}) {
        return new api_gateway_1.WatchApiGateway(this, aws_cdk_lib_1.Names.uniqueId(restApi), {
            title, watchful: this, restApi, ...options,
        });
    }
    watchLambdaFunction(title, fn, options = {}) {
        return new lambda_1.WatchLambdaFunction(this, aws_cdk_lib_1.Names.uniqueId(fn), {
            title, watchful: this, fn, ...options,
        });
    }
    watchStateMachine(title, stateMachine, options = {}) {
        return new state_machine_1.WatchStateMachine(this, aws_cdk_lib_1.Names.uniqueId(stateMachine), {
            title, watchful: this, stateMachine, ...options,
        });
    }
    watchRdsAuroraCluster(title, cluster, options = {}) {
        return new rds_aurora_1.WatchRdsAurora(this, aws_cdk_lib_1.Names.uniqueId(cluster), {
            title, watchful: this, cluster, ...options,
        });
    }
    watchFargateEcs(title, fargateService, targetGroup, options = {}) {
        return new ecs_1.WatchEcsService(this, aws_cdk_lib_1.Names.uniqueId(fargateService), {
            title, watchful: this, fargateService, targetGroup, ...options,
        });
    }
    watchEc2Ecs(title, ec2Service, targetGroup, options = {}) {
        return new ecs_1.WatchEcsService(this, aws_cdk_lib_1.Names.uniqueId(ec2Service), {
            title, watchful: this, ec2Service, targetGroup, ...options,
        });
    }
}
exports.Watchful = Watchful;
_a = JSII_RTTI_SYMBOL_1;
Watchful[_a] = { fqn: "cdk-watchful.Watchful", version: "0.0.0" };
function linkForDashboard(dashboard) {
    const cfnDashboard = dashboard.node.defaultChild;
    return `https://console.aws.amazon.com/cloudwatch/home?region=${dashboard.stack.region}#dashboards:name=${cfnDashboard.ref}`;
}
function hasAlarmAction(alarm) {
    return 'addAlarmAction' in alarm;
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchEcsService = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const metrics_1 = require("./monitoring/aws/ecs/metrics");
class WatchEcsService extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.watchful = props.watchful;
        if (props.ec2Service) {
            this.ecsService = props.ec2Service;
            this.serviceName = props.ec2Service.serviceName;
            this.clusterName = props.ec2Service.cluster.clusterName;
        }
        else if (props.fargateService) {
            this.ecsService = props.fargateService;
            this.serviceName = props.fargateService.serviceName;
            this.clusterName = props.fargateService.cluster.clusterName;
        }
        else {
            throw new Error('No service provided to monitor.');
        }
        this.targetGroup = props.targetGroup;
        this.targetGroupName = this.targetGroup.targetGroupFullName;
        this.loadBalancerName = this.targetGroup.firstLoadBalancerFullName;
        this.metrics = new metrics_1.EcsMetricFactory();
        this.watchful.addSection(props.title, {
            links: [
                { title: 'ECS Service', url: linkForEcsService(this.ecsService) },
            ],
        });
        const { cpuUtilizationMetric, cpuUtilizationAlarm } = this.createCpuUtilizationMonitor(props.cpuMaximumThresholdPercent);
        const { memoryUtilizationMetric, memoryUtilizationAlarm } = this.createMemoryUtilizationMonitor(props.memoryMaximumThresholdPercent);
        const { targetResponseTimeMetric, targetResponseTimeAlarm } = this.createTargetResponseTimeMonitor(props.targetResponseTimeThreshold);
        const { healthyHostsMetric, unhealthyHostsMetric } = this.createHostCountMetrics();
        const { requestsMetric, requestsAlarm } = this.createRequestsMonitor(props.requestsThreshold);
        const { http2xxMetric, http3xxMetric, http4xxMetric, http5xxMetric } = this.createHttpRequestsMetrics();
        const { requestsErrorRateMetric, requestsErrorRateAlarm } = this.requestsErrorRate(props.requestsErrorRateThreshold);
        this.watchful.addWidgets(new cloudwatch.GraphWidget({
            title: `CPUUtilization/${cpuUtilizationMetric.period.toMinutes()}min`,
            width: 12,
            left: [cpuUtilizationMetric],
            leftAnnotations: [cpuUtilizationAlarm.toAnnotation()],
        }), new cloudwatch.GraphWidget({
            title: `MemoryUtilization/${memoryUtilizationMetric.period.toMinutes()}min`,
            width: 12,
            left: [memoryUtilizationMetric],
            leftAnnotations: [memoryUtilizationAlarm.toAnnotation()],
        }));
        this.watchful.addWidgets(new cloudwatch.SingleValueWidget({
            title: 'Healthy Hosts',
            height: 6,
            width: 6,
            metrics: [healthyHostsMetric],
        }), new cloudwatch.SingleValueWidget({
            title: 'UnHealthy Hosts',
            height: 6,
            width: 6,
            metrics: [unhealthyHostsMetric],
        }), new cloudwatch.GraphWidget({
            title: `TargetResponseTime/${targetResponseTimeMetric.period.toMinutes()}min`,
            width: 6,
            left: [targetResponseTimeMetric],
            leftAnnotations: [targetResponseTimeAlarm.toAnnotation()],
        }), new cloudwatch.GraphWidget({
            title: `Requests/${requestsMetric.period.toMinutes()}min`,
            width: 6,
            left: [requestsMetric],
            leftAnnotations: [requestsAlarm.toAnnotation()],
        }));
        this.watchful.addWidgets(new cloudwatch.GraphWidget({
            title: 'HTTP Requests Overview',
            width: 12,
            left: [http2xxMetric, http3xxMetric, http4xxMetric, http5xxMetric],
        }), new cloudwatch.GraphWidget({
            title: `HTTP Requests Error rate/${requestsErrorRateMetric.period.toMinutes()}min`,
            width: 12,
            left: [requestsErrorRateMetric],
            leftAnnotations: [requestsErrorRateAlarm.toAnnotation()],
        }));
    }
    createCpuUtilizationMonitor(cpuMaximumThresholdPercent = 0) {
        const cpuUtilizationMetric = this.metrics.metricCpuUtilizationAverage(this.clusterName, this.serviceName);
        const cpuUtilizationAlarm = cpuUtilizationMetric.createAlarm(this, 'cpuUtilizationAlarm', {
            alarmDescription: 'cpuUtilizationAlarm',
            threshold: cpuMaximumThresholdPercent,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 3,
        });
        this.watchful.addAlarm(cpuUtilizationAlarm);
        return { cpuUtilizationMetric, cpuUtilizationAlarm };
    }
    createMemoryUtilizationMonitor(memoryMaximumThresholdPercent = 0) {
        const memoryUtilizationMetric = this.metrics.metricMemoryUtilizationAverage(this.clusterName, this.serviceName);
        const memoryUtilizationAlarm = memoryUtilizationMetric.createAlarm(this, 'memoryUtilizationAlarm', {
            alarmDescription: 'memoryUtilizationAlarm',
            threshold: memoryMaximumThresholdPercent,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 3,
        });
        this.watchful.addAlarm(memoryUtilizationAlarm);
        return { memoryUtilizationMetric, memoryUtilizationAlarm };
    }
    createTargetResponseTimeMonitor(targetResponseTimeThreshold = 0) {
        const targetResponseTimeMetric = this.metrics.metricTargetResponseTime(this.targetGroupName, this.loadBalancerName).avg;
        const targetResponseTimeAlarm = targetResponseTimeMetric.createAlarm(this, 'targetResponseTimeAlarm', {
            alarmDescription: 'targetResponseTimeAlarm',
            threshold: targetResponseTimeThreshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 3,
        });
        this.watchful.addAlarm(targetResponseTimeAlarm);
        return { targetResponseTimeMetric, targetResponseTimeAlarm };
    }
    createRequestsMonitor(requestsThreshold = 0) {
        const requestsMetric = this.metrics.metricRequestCount(this.targetGroupName, this.loadBalancerName);
        const requestsAlarm = requestsMetric.createAlarm(this, 'requestsAlarm', {
            alarmDescription: 'requestsAlarm',
            threshold: requestsThreshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 3,
        });
        this.watchful.addAlarm(requestsAlarm);
        return { requestsMetric, requestsAlarm };
    }
    createHttpRequestsMetrics() {
        const metrics = this.metrics.metricHttpStatusCodeCount(this.targetGroupName, this.loadBalancerName);
        const http2xxMetric = metrics.count2XX;
        const http3xxMetric = metrics.count3XX;
        const http4xxMetric = metrics.count4XX;
        const http5xxMetric = metrics.count5XX;
        return { http2xxMetric, http3xxMetric, http4xxMetric, http5xxMetric };
    }
    createHostCountMetrics() {
        const healthyHostsMetric = this.metrics.metricMinHealthyHostCount(this.targetGroupName, this.loadBalancerName);
        const unhealthyHostsMetric = this.metrics.metricMaxUnhealthyHostCount(this.targetGroupName, this.loadBalancerName);
        return { healthyHostsMetric, unhealthyHostsMetric };
    }
    requestsErrorRate(requestsErrorRateThreshold = 0) {
        const requestsErrorRateMetric = this.metrics.metricHttpErrorStatusCodeRate(this.targetGroupName, this.loadBalancerName);
        const requestsErrorRateAlarm = requestsErrorRateMetric.createAlarm(this, 'requestsErrorRateAlarm', {
            alarmDescription: 'requestsErrorRateAlarm',
            threshold: requestsErrorRateThreshold,
            comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 3,
        });
        this.watchful.addAlarm(requestsErrorRateAlarm);
        return { requestsErrorRateMetric, requestsErrorRateAlarm };
    }
}
exports.WatchEcsService = WatchEcsService;
_a = JSII_RTTI_SYMBOL_1;
WatchEcsService[_a] = { fqn: "cdk-watchful.WatchEcsService", version: "0.0.0" };
function linkForEcsService(ecsService) {
    return `https://console.aws.amazon.com/ecs/home?region=${ecsService.stack.region}#/clusters/${ecsService.cluster.clusterName}/services/${ecsService.serviceName}/details`;
}
//# sourceMappingURL=data:application/json;base64,